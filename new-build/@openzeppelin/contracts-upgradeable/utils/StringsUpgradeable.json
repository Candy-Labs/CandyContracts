{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"assembly":"    /* \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":146:2042  library StringsUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":146:2042  library StringsUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205c26a8ecf699c81cab8df258fe708f54fc44e5aaaf2bf0f3c94bb621c11c48c564736f6c634300080d0033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c26a8ecf699c81cab8df258fe708f54fc44e5aaaf2bf0f3c94bb621c11c48c564736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0x26 0xA8 0xEC 0xF6 SWAP10 0xC8 SHR 0xAB DUP14 CALLCODE PC INVALID PUSH17 0x8F54FC44E5AAAF2BF0F3C94BB621C11C48 0xC5 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"146:1896:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1896:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c26a8ecf699c81cab8df258fe708f54fc44e5aaaf2bf0f3c94bb621c11c48c564736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0x26 0xA8 0xEC 0xF6 SWAP10 0xC8 SHR 0xAB DUP14 CALLCODE PC INVALID PUSH17 0x8F54FC44E5AAAF2BF0F3C94BB621C11C48 0xC5 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ","sourceMap":"146:1896:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"legacyAssembly":{".code":[{"begin":146,"end":2042,"name":"PUSH #[$]","source":9,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":146,"end":2042,"name":"PUSH [$]","source":9,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"B"},{"begin":146,"end":2042,"name":"DUP3","source":9},{"begin":146,"end":2042,"name":"DUP3","source":9},{"begin":146,"end":2042,"name":"DUP3","source":9},{"begin":146,"end":2042,"name":"CODECOPY","source":9},{"begin":146,"end":2042,"name":"DUP1","source":9},{"begin":146,"end":2042,"name":"MLOAD","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"0"},{"begin":146,"end":2042,"name":"BYTE","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"73"},{"begin":146,"end":2042,"name":"EQ","source":9},{"begin":146,"end":2042,"name":"PUSH [tag]","source":9,"value":"1"},{"begin":146,"end":2042,"name":"JUMPI","source":9},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"4E487B71"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"E0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"0"},{"begin":146,"end":2042,"name":"MSTORE","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"0"},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"4"},{"begin":146,"end":2042,"name":"MSTORE","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"24"},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"0"},{"begin":146,"end":2042,"name":"REVERT","source":9},{"begin":146,"end":2042,"name":"tag","source":9,"value":"1"},{"begin":146,"end":2042,"name":"JUMPDEST","source":9},{"begin":146,"end":2042,"name":"ADDRESS","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"0"},{"begin":146,"end":2042,"name":"MSTORE","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"73"},{"begin":146,"end":2042,"name":"DUP2","source":9},{"begin":146,"end":2042,"name":"MSTORE8","source":9},{"begin":146,"end":2042,"name":"DUP3","source":9},{"begin":146,"end":2042,"name":"DUP2","source":9},{"begin":146,"end":2042,"name":"RETURN","source":9}],".data":{"0":{".auxdata":"a26469706673582212205c26a8ecf699c81cab8df258fe708f54fc44e5aaaf2bf0f3c94bb621c11c48c564736f6c634300080d0033",".code":[{"begin":146,"end":2042,"name":"PUSHDEPLOYADDRESS","source":9},{"begin":146,"end":2042,"name":"ADDRESS","source":9},{"begin":146,"end":2042,"name":"EQ","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"80"},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"40"},{"begin":146,"end":2042,"name":"MSTORE","source":9},{"begin":146,"end":2042,"name":"PUSH","source":9,"value":"0"},{"begin":146,"end":2042,"name":"DUP1","source":9},{"begin":146,"end":2042,"name":"REVERT","source":9}]}}},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
