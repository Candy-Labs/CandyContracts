{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"assembly":"    /* \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":424:1406  library CountersUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":424:1406  library CountersUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bbc988f27b0041e924c74688b7568b73c0f58cf647d5c0a69fdc9f06952582da64736f6c634300080d0033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbc988f27b0041e924c74688b7568b73c0f58cf647d5c0a69fdc9f06952582da64736f6c634300080d0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xC9 DUP9 CALLCODE PUSH28 0x41E924C74688B7568B73C0F58CF647D5C0A69FDC9F06952582DA64 PUSH20 0x6F6C634300080D00330000000000000000000000 ","sourceMap":"424:982:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:982:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbc988f27b0041e924c74688b7568b73c0f58cf647d5c0a69fdc9f06952582da64736f6c634300080d0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xC9 DUP9 CALLCODE PUSH28 0x41E924C74688B7568B73C0F58CF647D5C0A69FDC9F06952582DA64 PUSH20 0x6F6C634300080D00330000000000000000000000 ","sourceMap":"424:982:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"legacyAssembly":{".code":[{"begin":424,"end":1406,"name":"PUSH #[$]","source":8,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":424,"end":1406,"name":"PUSH [$]","source":8,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"B"},{"begin":424,"end":1406,"name":"DUP3","source":8},{"begin":424,"end":1406,"name":"DUP3","source":8},{"begin":424,"end":1406,"name":"DUP3","source":8},{"begin":424,"end":1406,"name":"CODECOPY","source":8},{"begin":424,"end":1406,"name":"DUP1","source":8},{"begin":424,"end":1406,"name":"MLOAD","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"0"},{"begin":424,"end":1406,"name":"BYTE","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"73"},{"begin":424,"end":1406,"name":"EQ","source":8},{"begin":424,"end":1406,"name":"PUSH [tag]","source":8,"value":"1"},{"begin":424,"end":1406,"name":"JUMPI","source":8},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"4E487B71"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"E0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"0"},{"begin":424,"end":1406,"name":"MSTORE","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"0"},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"4"},{"begin":424,"end":1406,"name":"MSTORE","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"24"},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"0"},{"begin":424,"end":1406,"name":"REVERT","source":8},{"begin":424,"end":1406,"name":"tag","source":8,"value":"1"},{"begin":424,"end":1406,"name":"JUMPDEST","source":8},{"begin":424,"end":1406,"name":"ADDRESS","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"0"},{"begin":424,"end":1406,"name":"MSTORE","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"73"},{"begin":424,"end":1406,"name":"DUP2","source":8},{"begin":424,"end":1406,"name":"MSTORE8","source":8},{"begin":424,"end":1406,"name":"DUP3","source":8},{"begin":424,"end":1406,"name":"DUP2","source":8},{"begin":424,"end":1406,"name":"RETURN","source":8}],".data":{"0":{".auxdata":"a2646970667358221220bbc988f27b0041e924c74688b7568b73c0f58cf647d5c0a69fdc9f06952582da64736f6c634300080d0033",".code":[{"begin":424,"end":1406,"name":"PUSHDEPLOYADDRESS","source":8},{"begin":424,"end":1406,"name":"ADDRESS","source":8},{"begin":424,"end":1406,"name":"EQ","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"80"},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"40"},{"begin":424,"end":1406,"name":"MSTORE","source":8},{"begin":424,"end":1406,"name":"PUSH","source":8,"value":"0"},{"begin":424,"end":1406,"name":"DUP1","source":8},{"begin":424,"end":1406,"name":"REVERT","source":8}]}}},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
